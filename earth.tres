[gd_resource type="ShaderMaterial" load_steps=13 format=2]

[ext_resource path="res://earth.jpg" type="Texture" id=1]

[sub_resource type="VisualShaderNodeInput" id=3]
input_name = "normal"

[sub_resource type="VisualShaderNodeInput" id=4]
input_name = "view"

[sub_resource type="VisualShaderNodeVectorInterp" id=5]

[sub_resource type="VisualShaderNodeScalarConstant" id=6]
constant = 0.7

[sub_resource type="VisualShaderNodeTexture" id=7]
texture = ExtResource( 1 )

[sub_resource type="VisualShaderNodeVectorFunc" id=8]
function = 4

[sub_resource type="VisualShaderNodeCompare" id=9]
default_input_values = [ 0, 0.0, 1, 0.0, 2, 0.4 ]
function = 1

[sub_resource type="VisualShaderNodeVectorDecompose" id=10]

[sub_resource type="VisualShaderNodeColorConstant" id=11]
constant = Color( 0.117647, 0.113725, 0.286275, 1 )

[sub_resource type="VisualShaderNodeFresnel" id=12]
default_input_values = [ 2, false, 3, 5.0 ]

[sub_resource type="VisualShader" id=13]
code = "shader_type spatial;
render_mode specular_schlick_ggx;

uniform sampler2D tex_frg_2;



void vertex() {
// Output:0

}

void fragment() {
// Input:11
	vec3 n_out11p0 = NORMAL;

// Input:12
	vec3 n_out12p0 = VIEW;

// Fresnel:9
	float n_in9p3 = 5.00000;
	float n_out9p0 = pow(1.0 - clamp(dot(n_out11p0, n_out12p0), 0.0, 1.0), n_in9p3);

// Texture:2
	vec4 tex_frg_2_read = texture(tex_frg_2, UV.xy);
	vec3 n_out2p0 = tex_frg_2_read.rgb;
	float n_out2p1 = tex_frg_2_read.a;

// Scalar:14
	float n_out14p0 = 0.700000;

// VectorMix:13
	vec3 n_out13p0 = mix(vec3(n_out9p0), n_out2p0, vec3(n_out14p0));

// VectorFunc:5
	vec3 n_out5p0;
	{
		vec3 c = n_out2p0;
		vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
		vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));
		vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));
		float d = q.x - min(q.w, q.y);
		float e = 1.0e-10;
		n_out5p0 = vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
	}

// VectorDecompose:7
	float n_out7p0 = n_out5p0.x;
	float n_out7p1 = n_out5p0.y;
	float n_out7p2 = n_out5p0.z;

// Color:8
	vec3 n_out8p0 = vec3(0.117647, 0.113725, 0.286275);
	float n_out8p1 = 1.000000;

// Compare:6
	float n_in6p2 = 0.40000;
	bool n_out6p0 = !(abs(n_out7p0 - dot(n_out8p0, vec3(0.333333, 0.333333, 0.333333))) < n_in6p2);
// Output:0
	ALBEDO = n_out13p0;
	SPECULAR = (n_out6p0 ? 1.0 : 0.0);

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -1032.8, -369.6 )
nodes/fragment/0/position = Vector2( 820, -240 )
nodes/fragment/2/node = SubResource( 7 )
nodes/fragment/2/position = Vector2( -820, -160 )
nodes/fragment/5/node = SubResource( 8 )
nodes/fragment/5/position = Vector2( -460, 100 )
nodes/fragment/6/node = SubResource( 9 )
nodes/fragment/6/position = Vector2( 100, 80 )
nodes/fragment/7/node = SubResource( 10 )
nodes/fragment/7/position = Vector2( -200, 80 )
nodes/fragment/8/node = SubResource( 11 )
nodes/fragment/8/position = Vector2( -160, 260 )
nodes/fragment/9/node = SubResource( 12 )
nodes/fragment/9/position = Vector2( 60, -280 )
nodes/fragment/11/node = SubResource( 3 )
nodes/fragment/11/position = Vector2( -260, -280 )
nodes/fragment/12/node = SubResource( 4 )
nodes/fragment/12/position = Vector2( -260, -220 )
nodes/fragment/13/node = SubResource( 5 )
nodes/fragment/13/position = Vector2( 340, -220 )
nodes/fragment/14/node = SubResource( 6 )
nodes/fragment/14/position = Vector2( 120, -100 )
nodes/fragment/connections = PoolIntArray( 2, 0, 5, 0, 5, 0, 7, 0, 7, 0, 6, 0, 8, 0, 6, 1, 11, 0, 9, 0, 12, 0, 9, 1, 9, 0, 13, 0, 2, 0, 13, 1, 14, 0, 13, 2, 13, 0, 0, 0, 6, 0, 0, 4 )

[resource]
shader = SubResource( 13 )
